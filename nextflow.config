//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.

params {
    help = false
    out_dir = "output"
    fastq = null
    sanitize_fastq = false
    sample = null
    sample_sheet = null
    params.threads = 4
    reference = null
    simplified_bed = null
    amplicons_bed = null
    primers_bed = null
    variant_db = null
    variants = null
    genbank = null
    realign = false
    report_config = null
    maf = 0.1
    strand_bias = 1000
    minimum_read_support = 5
    downsample = null
    noncanonical = false
    wfversion = "v1.0.7"
    disable_ping = false
    aws_image_prefix = null
    aws_queue = null
    ntc_threshold = "20,3"
    sample_threshold = "-20,8"
    positive_threshold = "-20,2"

    process_label = 'microbial'

    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wfversion,wf'

    wf {
        example_cmd = [
            "--fastq test_data/fastq",
            "--sample_sheet test_data/sample_sheet.csv"
        ]
    }
}

manifest {
    name            = 'epi2me-labs/wf-tb-amr'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-tb-amr'
    description     = 'Workflow for AMR calling in TB'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.10.0'
}

executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}

process {
    withLabel:microbial { container = "ontresearch/wf-tb-amr:${params.wfversion}" }
    withLabel:npore { container = "timd1/npore:latest" }
    shell = ['/bin/bash', '-euo', 'pipefail']
}

profiles {

    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
    }

    // profile using conda environments rather than docker
    // containers
    conda {
        docker {
            enabled = false
        }
        process {
            withLabel:microbial { conda = "${projectDir}/environment.yaml" }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
        conda {
             cacheDir = ""
        }
    }

    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:microbial {
                container = "${params.aws_image_prefix}-wf-tb-amr:${params.wfversion}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
dag {
  enabled = true
  file = "${params.out_dir}/execution/pipeline.svg"
}
